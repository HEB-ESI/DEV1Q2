<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../_templates/java/latex.xsl"?>
<lesson xmlns="http://www.elml.ch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.elml.ch ../../../_config/validate.xsd" 
	label="TDModule" title="TD Récapitulatif">
	
	<entry>
		<paragraph>
			Ce TD a pour but d'aborder pourquoi et comment découper un algorithme,
			comment lancer une exception et documenter votre code.
		</paragraph>
	</entry>
	
	<!-- =========================================================== -->
	<unit label="Decouper" title="Découper du code">
	<!-- =========================================================== -->
    <learningObject title="Découper du code : algorithmes ou méthodes">
    <entry>
      Pourquoi ?
      <list listStyle="unordered">
        <item>Pour le réutiliser</item>
        <item>Pour scinder la difficulté</item>
        <item>Pour faciliter le déverminage</item>
        <item>Pour accroitre la lisibilité</item>
        <item>Pour diviser le travail</item>
      </list>
    </entry>
    <entry>
      Comment ?
      <list listStyle="unordered">
        <item>Il existe un nom qui décrit tout ce qu’il fait</item>
        <item>Il résout un sous-problème bien précis</item>
        <item>Il est fortement documenté</item>
        <item>Il est le plus général possible</item>
        <item>Il tient sur une page</item>
      </list>
    </entry>
    <entry>
      En algo,nous parlerons d'<formatted style="bold">algorithme</formatted>.
      En Java nous parlerons de <formatted style="bold">méthode</formatted>.
    </entry>
    </learningObject>
	</unit>
	
	<!-- =========================================================== -->
	<unit label="PassageParametres" title="Passage de paramètres">
	<!-- =========================================================== -->

    
		<learningObject title="Algorithme">
		<!-- ================================================ -->
		<clarify>
		  <paragraph>
        Pour pouvoir faire communiquer les algorithmes entre eux, il faut les équiper d’une « interface »
        de transmission des variables appelée l’<formatted style="bold">en-tête</formatted> d'algorithme et qui contient une déclaration
        de variables qu’on appellera ici <formatted style="bold">paramètres</formatted> de l'algorithme.
      </paragraph>
      <paragraph>
        <list listStyle="unordered">
          <item>
            Les variables accompagnées d’une flèche vers le bas (↓) sont des <formatted style="bold">paramètres d’entrée</formatted> qui
            reçoivent des <formatted style="bold">données</formatted> au début de l’exécution de l'algorithme (données qui ne doivent donc plus
            être lues) 
          </item>
          <item>
            tandis que celles accompagnées d’une flèche vers le haut (↑) sont des <formatted style="bold">paramètres
            de sortie</formatted> qui permettent de renvoyer des résultats à l’<formatted style="bold">issue</formatted> de l’exécution de l'algorithme
            (résultats qui ne doivent donc plus être affichés). 
          </item>
          <item>
            Les variables accompagnées d'une double flèche (↓ ↑) sont en<formatted style="bold"> entrée-sortie</formatted> c-à-d qu'elles ont une valeur
            en arrivant dans l'algorithme, que cette valeur sera modifiée dans l'algorithme et que la valeur modifiée est en sortie. 
            La variable de départ aura donc changé de valeur dans l'algorithme et ce changement se répercute en dehors.
          </item>
        </list>
      </paragraph>
      <paragraph>Par exemple, ceci donnerait pour l'algorithme max2 : </paragraph>
      <paragraph cssClass="code">
algorithme max2 (a↓, b↓ : réels, max↑ : réel)
    si a > b alors
      max ← a
    sinon
      max ← b
    fin si
fin algorithme
      </paragraph>
      <paragraph>
        Cet algorithme <formatted style="bold">ne lit rien et n’affiche rien</formatted>,
        mais il est cependant prêt à être utilisé. Il suffit pour cela de lui fournir les valeurs de <formatted style="code">a</formatted> 
        et <formatted style="code">b</formatted> (paramètres d’entrée) pour qu’il entre en action. Une fois le maximum calculé, celui-ci est
        affecté à la variable max qui – en tant que paramètre de sortie – contiendra et renverra le
        résultat voulu.
      </paragraph>
    </clarify>
    </learningObject>
    
    <learningObject title="Appel d'algorithme">
		<!-- ================================================ -->
		<clarify>
      <paragraph>
        Pour faire appel aux services de cet algorithme, il suffit à présent d’écrire son nom suivi d’un
        nombre de variables (ou, en entrée, d’expressions) en accord avec son en-tête. 
      </paragraph>
      <paragraph>Montrons par un exemple comment l'algorithme max3 peut faire appel à l'algorithme max2 : </paragraph>
      <paragraph cssClass="code">
algorithme max3 (a, b, c : réels) → réel
    temp, max : réels
    max2( a, b, temp )
    max2( temp, c, max )
    retourner max
fin algorithme
      </paragraph>
      <paragraph>
        L’instruction max2(a, b, temp) se déroule comme suit :
        <list listStyle="unordered">
            <item>le contenu des variables a et b est affecté aux paramètres d’entrée a et b de l'algorithme max2, puis cet algorithme peut entrer en action ;</item>
            <item>à l’issue de l'algorithme max2, la valeur du paramètre de sortie max est communiquée à la variable temp, qui contient à présent le maximum de a et b</item>
          </list>
      </paragraph>
      <paragraph>
        L’instruction max2(temp, c, max) se déroule comme suit :
        <list listStyle="unordered">
            <item>le contenu des variables temp et c est affecté aux paramètres d’entrée a et b de l'algorithme max2, puis cet algorithme peut entrer en action ;</item>
            <item>à l’issue de l'algorithme max2, la valeur du paramètre de sortie max est communiquée à la variable max qui contient à présent le maximum des 3 nombres de départ.</item>
          </list>
      </paragraph>
      <paragraph>
        Implicitement, on a introduit ici un nouveau type de primitive, l’appel à un algorithme qui
        consiste en la simple écriture de son nom dans le code. Cette instruction est reconnue comme
        telle car elle ne s’apparente pas aux autres types d’instruction vus précédemment (primitives
        demander, afficher, ← , structures de contrôle si, selon que, tant que, pour. . .). Lorsque l’ordinateur
        rencontre cette instruction, il va rechercher si un algorithme portant ce nom existe. Une
        fois cet algorithme trouvé, les paramètres ad hoc lui sont communiqués et toutes les instructions
        le composant sont exécutées séquentiellement. Arrivé à l’issue de l'algorithme, les paramètres de
        sortie sont communiqués à l'algorithme appelant et le déroulement de celui-ci se poursuit là où
        il avait été interrompu.
      </paragraph>
      <paragraph>
        Remarques : 
        <list listStyle="unordered">
            <item>si tous les paramètres sont en entrée, on peut omettre les flèches ;</item>
            <item>
              la présence de ces paramètres n’est pas obligatoire, on peut envisager un algorithme sans
              paramètre de sortie (par ex. un algorithme qui reçoit en entrée un nombre et dont la seule
              fonction est de l’afficher à l’écran), ou inversement sans paramètre d’entrée (un algorithme 
              qui simule un lancer de dé, et renvoie en paramètre une valeur aléatoire entre 1 et 6) ;
            </item>
            <item>
              pour appeler correctement un algorithme, il faut fournir des noms de variables, des expressions ou des constantes 
              en <formatted style="bold">même nombre</formatted> et en <formatted style="bold">même ordre</formatted> 
              que les paramètres de l'algorithme ;
            </item>
            <item>en outre, les types des variables doivent correspondre entre l’appel et l’en-tête de l'algorithme ;</item>
            <item>ne peut être affectée à un paramètre d’entrée de l'algorithme  qu’une constante, une expression ou une variable préalablement affectée ;</item>
            <item>à un paramètre de sortie d’un algorithme doit toujours correspondre une autre variable, jamais une constante ou une expression ;</item>
            <item>il faut s’assurer qu’à l’issue de l'algorithme, tous les paramètres de sortie aient été affectés lors de l’exécution de cet algorithme.</item>
          </list>
      </paragraph>
    </clarify>
    </learningObject>
	</unit>
		
  
	<!-- =========================================================== -->
	<unit label="RetournerValeur" title="Algorithme renvoyant une valeur">
	<!-- =========================================================== -->

    <entry>Un deuxième type d'algorithme est l'algorithme renvoyant une valeur. 
    (On désigne aussi ce type d'algorithmes par le terme fonction).</entry>
    
		<learningObject title="En algo">
		<!-- ================================================ -->
		<clarify>
		  <paragraph>Son en-tête est du type suivant :</paragraph>
		   <paragraph cssClass="code">
algorithme exemple (var1↓ : type1, var2↓ : type2, . . ., varN↓ : typeN) → typeRes
      </paragraph>
      <paragraph>
        Il se distingue de l'algorithme précédemment étudié par la flèche de renvoi à droite,
        et possède les particularités suivantes :
      </paragraph>
      <paragraph>
        <list listStyle="unordered">
            <item>cet algorithme renvoie une valeur qui n’est pas affectée à une variable de sortie ;</item>
            <item>à droite de la flèche de renvoi ne se trouve donc pas le nom d’un paramètre de sortie,
            mais le <formatted style="bold">type</formatted> de la valeur renvoyée ;</item>
            <item>typeRes est le type de la valeur renvoyée ; en théorie, ce peut être un type simple
            (entier, réel, booléen, chaine), un type structuré ou même un tableau (ces
            types seront vus dans les chapitres suivants). En pratique il conviendra de s’en tenir
            aux limitations du langage utilisé ;</item>
            <item>var1, . . ., varN sont les paramètres de l'algorithme
            (aussi appelés <formatted style="bold">arguments</formatted> ) ; ce sont, le
            plus souvent, des paramètres d’entrée, les paramètres de sortie étant plus rares dans
            ce type d'algorithme ;</item>
            <item>ces arguments deviennent automatiquement des variables locales de l'algorithme ; déclarées
            dans son en-tête, elles ne doivent plus l’être dans la partie déclarative ;</item>
            <item>la valeur renvoyée est définie à la fin de l'algorithme via la primitive 
            <formatted style="code">retourner résultat</formatted>, où
            résultat est une variable (ou plus généralement une expression) de type typeRes ;</item>
            <item>pour appeler ce type d'algorithme, on utilise son nom comme celui d’une variable ou
            dans une expression apparaissant dans l'algorithme appelant, mais jamais à gauche du
            signe d’affectation.</item>
          </list>
        </paragraph>
        <paragraph>
          Comme précédemment, il faut veiller, lors de l’appel de ce type d'algorithme, à ce que le
          nombre d’arguments ainsi que leur type correspondent à ceux spécifiés dans l’en-tête.
        </paragraph>
      </clarify>
      <look>
         <paragraph>Par exemple, ceci donnerait pour l'algorithme max2 : </paragraph>
      <paragraph cssClass="code">
algorithme max2 (a↓, b↓ : réels)→ réel
    si a > b alors
      max ← a
    sinon
      max ← b
    fin si
    retourner max
fin algorithme
      </paragraph>
      <paragraph>
        Pour faire appel aux services de cet algorithme, il suffit à présent d’écrire son nom suivi d’un
        nombre de variables (ou, en entrée, d’expressions) en accord avec son en-tête. 
      </paragraph>
      <paragraph>Montrons par un exemple comment l'algorithme max3 peut faire appel à l'algorithme max2 : </paragraph>
      <paragraph cssClass="code">
algorithme max3 (a, b, c : réels)  → réel
    temp, max : réels
    temp ← max2( a, b)
    max ← max2( temp, c)
    retourner max
fin algorithme
      </paragraph>
    </look>
    </learningObject>
  </unit>
  
  
  <!-- =================================================================== -->
	<unit label="Methodes" title="Méthodes et appel de méthodes">
	<!-- =================================================================== -->
    <learningObject title="Méthode">
		<!-- ================================================ -->
		<clarify>
		  Syntaxe : 
		  <paragraph cssClass="code">
<![CDATA[
public static <typeRetour> nomMéthode ([paramètre, paramètre, ...]) {
    // instructions
    <return résultat>;
}]]>				</paragraph>
		</clarify>
		<clarify>
		  <paragraph>
        En algorithmique, il y a 3 passages de paramètres :
        en entrée ↓, en sortie ↑, en entrée-sortie ↓↑
      </paragraph>
      <paragraph>
        En Java, le passage de paramètre se fait uniquement par valeur ; 
        c-à-d que la valeur est copiée dans le paramètre.
        Pour les types primitifs, c'est l'équivalent d'un paramètre en entrée.
      </paragraph>
		</clarify>
		</learningObject>
		
		<learningObject title="Appel de méthode">
		<!-- ================================================ -->
		<clarify>
		  <paragraph>
		    Une méthode est une <formatted style="bold">boite noire</formatted> : 
		  </paragraph>
      <paragraph>
        <multimedia src="../image/methode.jpg" type="jpeg"/>
		  </paragraph>
		  <paragraph> 
		    Pour l’utiliser, il faut connaitre : 
		    <list listStyle="unordered">
            <item>son nom ;</item>
            <item>ce dont elle a besoin ;</item>
            <item>ce qu’elle retourne ;</item>
            <item>mais <formatted style="bold">pas comment</formatted> elle fait ;</item>
          </list>
		  </paragraph>
		</clarify>
		<clarify>
		  <paragraph> 
		    On peut appeler une méthode 
		    <list listStyle="unordered">
          <item>à partir du code d’une autre classe : <formatted style="input">NomClasse.nomMéthode(...)</formatted></item>
          <item>au sein de la même classe : <formatted style="input">nomMéthode(...)</formatted></item>
        </list>
      </paragraph>
    </clarify>
    </learningObject>
    
       <learningObject title="Exemples">
		<!-- ================================================ -->
		<look>
		  <paragraph>Par exemple : </paragraph>
		  <paragraph cssClass="java">
<![CDATA[
public static double moyenne ( double nb1, double nb2 ) {
    double moyenne = (nb1 + nb2) / 2.0;
    return moyenne;
}]]>				</paragraph>
      <paragraph>
        Appel possible (si dans la même classe) :
      </paragraph>
<paragraph cssClass="java">
<![CDATA[
double cote = moyenne(12.5, 17.5);
]]>				</paragraph>
		</look>
		<look>
		  <paragraph>Par exemple : </paragraph>
		  <paragraph cssClass="java">
<![CDATA[
public static int absolu ( int nb ) {
    int abs;
    if (nb<0) {
      abs = -nb;
    } else {
      abs = nb;
    }
    return abs;
}]]>				</paragraph>
      <paragraph>
        Appels possibles (si dans la même classe) :
      </paragraph>
<paragraph cssClass="java">
<![CDATA[
int resultat = absolu(4);
int ecart = -10;
int ecartAbsolu = absolu( ecart );
]]>				</paragraph>
		</look>
		<look>
		  <paragraph>Par exemple : </paragraph>
		  <paragraph cssClass="java">
<![CDATA[
public static void presenter (String nomPgm) {
    System.out. println ("Programme " + nomPgm);
}]]>				</paragraph>
      <paragraph>
        Appel possible (si dans la même classe) :
      </paragraph>
<paragraph cssClass="java">
<![CDATA[
presenter ("moyenne de 2 nombres");
]]>				</paragraph>
		</look>
		<look>
		  <paragraph>Par exemple : </paragraph>
		  <paragraph cssClass="java">
<![CDATA[
public static int demanderEntier () {
    Scanner clavier = new Scanner(System.in);
    int nb;
    System.out.println ("Entrez un nombre entier !");
    nb = clavier.nextInt ();
    return nb;
}]]>				</paragraph>
      <paragraph>
        Appel possible (si dans la même classe) :
      </paragraph>
<paragraph cssClass="java">
<![CDATA[
int nb = demanderEntier ();
]]>				</paragraph>
		</look>
		<look>
    <paragraph>Montrons par un exemple comment écrire la méthode max2 : </paragraph>
      <paragraph cssClass="java">
<![CDATA[
import java.util.Scanner;
public class Test{
  public static double max2(double nb1, double nb2){
    double max = nb1;
    if (nb1 < nb2) {
      max = nb2;
    }
    return max;
  }
}]]>				</paragraph>
		</look>
    </learningObject>
  </unit>
  
  <!-- =================================================================== -->
	<unit label="Erreur" title="Erreur ou Exception">
	<!-- =================================================================== -->
    <entry>
      <paragraph>
          Il est parfois utile de pouvoir signaler un problème dans le code. 
        </paragraph>
	  </entry>
	  
	  <learningObject title="Erreur">
      <clarify>
        <paragraph>
          Signaler un problème dans le code : c'est à ça que sert la primitive <formatted style="input">erreur</formatted> en algo.
          Elle signale que le programme rencontre une erreur à cet endroit et, en algo, 
          <formatted style="bold">le programme s'arrête</formatted>.
      </paragraph>
      </clarify>
      
      <look>
        <paragraph>
          Par exemple : 
        </paragraph>
        <paragraph cssClass="code">
// Lit un nombre, l'affiche s’il est positif et sinon lance une erreur.
algorithme demanderPositif ()
    nb : réel
    demander nb
    si nb <![CDATA[<]]> 0 alors
      erreur "Le nombre n’est pas positif !"
    fin si
    
    afficher nb
fin algorithme
        </paragraph>
      </look>
    </learningObject>
    
    <learningObject title="Lancer une exception">
      <clarify>
        <paragraph>En Java, pour lancer une erreur, on parlera d'une exception, on utilise l'instruction : </paragraph>
        <paragraph cssClass="java">
throw new NomDeLException("message de l'exception");
        </paragraph>
        <paragraph>qui <formatted style="bold">arrête le programme SI cette exception n'est pas gérée ailleurs</formatted>.</paragraph>
      </clarify>
      
      <look>
        <paragraph>
          Par exemple : 
        </paragraph>
        <paragraph cssClass="java">
import java.util.Scanner;
    // Lit un nombre, l affiche si il est positif et sinon lance une erreur.
    public static void main(String [] args){
      Scanner clavier = new Scanner(System.in);
      double nb = clavier.nextDouble();
      if (nb <![CDATA[<]]> 0) {
        throw new IllegalArgumentException("Le nombre n est pas positif !");
      }
      
      System.out.println(nb);
    }
}
        </paragraph>
      </look>
    </learningObject>
	</unit>
    
  <!-- =================================================================== -->
	<unit label="Commenter" title="Commenter une méthode">
	<!-- =================================================================== -->

    <learningObject title="Commenter une méthode">
		<!-- ================================================ -->
		<clarify>
		  <paragraph>
		    <list listStyle="unordered">
          <item>
            Pour qui ?
            <list listStyle="unordered">
              <item>Le programmeur qui va utiliser le code</item>
              <item>Le programmeur qui va maintenir le code (peut-être vous)</item>
            </list>
            </item>
            <item>
              Quel type de documentation ?
            <list listStyle="unordered">
              <item>Ce que fait la méthode/classe</item>
              <item>Comment elle le fait (peut être réduit au minimum si code lisible)</item>
            </list>
            </item>
            <item>
              Qui est intéressé par quoi ?
            <list listStyle="unordered">
              <item>Le programmeur-utilisateur : intéressé uniquement par le quoi</item>
              <item>Le programmeur-mainteneur : intéressé par le quoi et le comment</item>
            </list>
          </item>
          <item>
              Où mettre la documentation ?
            <list listStyle="unordered">
              <item>
                Avec le code
                  <list listStyle="unordered">
                    <item>Plus facile pour le maintenir</item>
                    <item>Plus de chance de garder la synchronisation avec le code</item>
                  </list>
              </item>
              <item>Mais le programmeur-utilisateur n’a pas à voir le code pour l’utiliser</item>
            </list>
          </item>
        </list>
		  </paragraph>
		  
		  <paragraph title="litterate programming">
		    <list listStyle="unordered">
          <item>la documentation accompagne le code</item>
          <item>un outil extrait cette documentation pour en faire un document facile à lire</item>
          <item>toute la documentation suit la même structure, le même style, donc, c'est plus facile à lire</item>
        </list>
		  </paragraph>
		  
		  <paragraph>
		    Regardons ce qui existe. 
		    Par exemple, la méthode <formatted style="code">abs</formatted> de la classe <formatted style="code">Math</formatted> :
		  </paragraph>
		  <paragraph>
        <multimedia src="../image/Mathabs.png" type="png"/>
		  </paragraph>
		  <paragraph>
		    Il est essentiel de commenter chaque méthode. C'est ce qui permet de pouvoir les utiliser facilement.
		  </paragraph>
		  <paragraph>
		    Comment écrire la nôtre :
		  </paragraph>
		  
		  <paragraph title="javadoc">
		    <list listStyle="unordered">
          <item>Le commentaire javadoc est identifié par <formatted style="code">/**... */</formatted> ;</item>
          <item>la documentation est produite au format HTML ;</item>
          <item>On commente essentiellement
            <list listStyle="unordered">
              <item>la classe : rôle et fonctionnement</item>
              <item>les méthodes publiques : ce que ça fait, paramètres et résultats</item>
            </list>
          </item>
          <item>Le commentaire se met <formatted style="bold">juste au dessus</formatted> de ce qui est commenté.</item>
        </list>
		  </paragraph>
		  
		  <paragraph title="Tag">
		    On utilise des <formatted style="bold">tags</formatted> pour identifier certains éléments.
		    Les plus courants :
		    <list listStyle="unordered">
          <item>@param : décrit les paramètres</item>
          <item>@return : décrit ce qui est retourné</item>
          <item>@throws : spécifie les exceptions lancées</item>
          <item>@author : note sur l’auteur</item>
        </list>
		  </paragraph>
		  
		  <paragraph cssClass="java">
<![CDATA[
/**
* Donne la racine carree d un nombre.
* @param nb le nombre dont on veut la racine carree .
* @return la racine carree du nombre.
* @throws IllegalArgumentException si le nombre est negatif .
*/
public static double sqrt( double nb ) {
    if(nb<0) {
      throw new IllegalArgumentException("Nombre negatif");
    
    return Math.sqrt(nb);
}]]>				</paragraph>

<paragraph>
		    Exemple : la valeur absolue
      </paragraph>
      <paragraph cssClass="java">
<![CDATA[
/**
* Calcul de la valeur absolue .
* @param nb le nombre dont on veut la valeur absolue .
* @return la valeur absolue de <code>nb</code>
*/
public static int absolu ( int nb ) {
    int abs;
    if (nb<0) {
      abs = -nb;
    } else {
      abs = nb;
    }
    return abs;
}]]>				</paragraph>

      <paragraph>
        <list listStyle="unordered">
          <item>Les types sont déduits de la signature et ajoutés à la documentation.</item>
          <item>La première phrase (terminée par un <formatted style="code">.</formatted>) sert de résumé.</item>
        </list>
      </paragraph>
		  
		  <paragraph title="html">
		    La documentation peut contenir des balises HTML.
		  </paragraph>
		  <paragraph cssClass="java">
<![CDATA[
/**
* Indique si l annee est bissextile . Pour rappel :
* <ul>
*   <li>Une annee qui n est pas divisible par 4 n est pas bissextile (ex: 2009)</li>
*   <li>Une annee qui est divisible par 4</li>
*   <ul>
*     <li>est en general bissextile (ex: 2008)</li>
*     <li>sauf si c est un multiple de 100 mais pas de 400 (ex: 1900, 2100)</li>
*     <li>les multiples de 400 sont donc bien bissextiles (ex: 2000, 2400)</li>
*   </ul>
* </ul>
* Plus formellement, <code>a</code> est bissextile si et seulement si <br/>
* <code>a MOD 400 = 0 OU (a MOD 4 = 0 ET a MOD 100 != 0)</code>
* @param annee l annee dont on se demande si elle est bissextile
* @return vrai si l annee est bissextile
*/}]]>				</paragraph>
      <paragraph>
        Ce qui donne : 
        <multimedia src="../image/javadocBissextile.png" type="png"/>
      </paragraph>
      
      <paragraph title="Produire la documentation">
        La commande javadoc : 
        <list listStyle="unordered">
          <item>javadoc Temps.java</item>
          <item>javadoc ∗.java</item>
          <item>javadoc −d doc ∗.java</item>
          <item>javadoc −charset utf−8 ∗.java</item>
          <item>. . . et beaucoup d’autres options (cf. documentation de javadoc)</item>
        </list>
      </paragraph>
      
      <paragraph title="Une bonne documentation">
        Une bonne javadoc décrit le quoi mais jamais le comment DONC, ne jamais parler de ce qui est privé.
      </paragraph>
      <paragraph>
        Mauvais exemples :
        <list listStyle="unordered">
          <item>On utilise un for pour parcourir le tableau.</item>
          <item>Pour aller plus vite, on stocke le <formatted style="code">prix hors tva</formatted> dans une variable temporaire.</item>
        </list>
      </paragraph>
      <paragraph>
        Ne pas écrire ce que javadoc écrit lui-même :
      </paragraph>
      <paragraph>
        Mauvais exemples :
        <list listStyle="unordered">
          <item>nb - un entier qui ...</item>
          <item>La méthode sqrt ...</item>
          <item>Cette méthode ne retourne rien.</item>
        </list>
      </paragraph>
      <paragraph>
        Pour en savoir plus : 
        <link uri="http://www.oracle.com/technetwork/articles/java/index-137868.html">http://www.oracle.com/technetwork/articles/java/index-137868.html</link>
      </paragraph>
		</clarify>
		</learningObject>
  
		<learningObject title="Un exemple complet">
		<!-- ================================================ -->
		<look>
		  <paragraph cssClass="java">
<![CDATA[
import java. util .Scanner;
public class MaxEntiers {
    /**
    * Donne le maximum de 2 nombres.
    * @param nb1 le premier nombre.
    * @param nb2 le deuxieme nombre.
    * @return la valeur la plus grande entre <code>nb1</code> et <code>nb2</code>
    */
    public static int max ( int nb1, int nb2 ) {
      int max=0;
      if (nb1 > nb2) {
        max = nb1;
      } else {
        max = nb2;
      }
      return max;
    }
    
    /**
    * Lit un nombre entier.
    * Le nombre est lu sur l entree standard ( le clavier ).
    * @return le nombre entier lu .
    */
    public static int demanderEntier () {
      Scanner clavier = new Scanner(System.in);
      System.out. println ("Entrez un nombre entier!");
      return clavier.nextInt ();
    }
    
    /**
    * Lit un nombre entier positif.
    * Le nombre est lu sur l entree standard ( le clavier ).
    * @return le nombre entier lu .
    * @throws IllegalArgumentException si le nombre lu est strictement negatif.
    */
    public static int demanderEntierPositif () {
      int nbLu = demanderEntier();
      
      if(nbLu < 0)
        throw new IllegalArgumentException("Nombre lu negatif");
      
      return nbLu;
    }
    
    /**
    * Affiche le maximum de 2 nombres entres au clavier.
    * @param args pas utilise.
    */
    public static void main ( String [] args ) {
      int max; // Le max des nombres lus
      int nb1, nb2; // Chacun des nombres lus
      nb1 = demanderEntier ();
      nb2 = demanderEntierPositif ();
      max = max(nb1,nb2);
      System.out. println ("max = " + max);
    }
}]]>				</paragraph>
		</look>
		</learningObject>
		
  </unit>
  
  
	<!-- =================================================================== -->
	<unit label="Exercices" title="Exercices">
	<!-- =================================================================== -->
		
		<entry>
			<paragraph>
				Maintenant, mettons tout ça en pratique.
      </paragraph>
    </entry>
    
    <learningObject title="Compréhension d’algorithme">
    <!-- ============================================================ -->
      <act>
        <paragraph>
          Pour ces exercices, nous vous demandons de comprendre des algorithmes donnés. 
          <selfCheck title="Compréhension" shuffle="no">
						<fillInBlanks>
							<question>
							  Que vont-ils afficher ?
              </question>
							<gapText> 
								<list listStyle="unordered">
									<item>
										<paragraph cssClass="code">
algorithme ex1 ()
    x, y : entiers
    addition(3, 4, x)
    afficher x
    x ← 3
    y ← 5
    addition(x, y, y)
    afficher y
fin algorithme

algorithme addition(a↓, b↓, c↑ : entiers)
    somme : entier
    somme ← a + b
    c ← somme
fin algorithme
				</paragraph>
				            <gap answers="7">7</gap>  <gap answers="8">8</gap> 
                  </item>
									<item>
										<paragraph cssClass="code">
algorithme ex2 ()
    a, b : entiers
    addition(3, 4, a)
    afficher a
    a ← 3
    b ← 5
    addition(b, a, b)
    afficher b
fin algorithme

algorithme addition(a↓, b↓, c↑ : entiers)
    somme : entier
    somme ← a + b
    c ← somme
fin algorithme
				</paragraph>
				            <gap answers="7">7</gap>  <gap answers="8">8</gap> 
                  </item>
									<item>
										<paragraph cssClass="code">
algorithme ex3 ()
    a, b, c : entiers
    calcul(3, 4, c)
    afficher c
    a ← 3
    b ← 4
    c ← 5
    calcul(b, c, a)
    afficher a, b, c
fin algorithme

algorithme calcul(a↓, b↓, c↑ : entiers)
    a ← 2*a
    b ← 3*b
    c ← a+b
fin algorithme
				            </paragraph>
				            <gap answers="18">18</gap>  <gap answers="23">23</gap> 
                  </item>
                  
                  <item>
										<paragraph cssClass="code">
algorithme ex4 ()
    a, b, c : entiers
    a ← 3
    b ← 4
    c ← f(b)
    afficher c
    calcul2(a, b, c)
    afficher a, b, c
fin algorithme

algorithme calcul2 (a↓, b↓, c↑ : entiers)
    a ← f(a) 
    c ← 3*b 
    c ← a+c
fin algorithme

algorithme f (a↓ : entier) → entier
    b : entier
    b ← 2*a+1
    retourner b
fin algorithme
				            </paragraph>
				            <gap answers="9">9</gap>  <gap answers="3">3</gap> <gap answers="4">4</gap> <gap answers="19">19</gap> 
                  </item>
								</list>
							</gapText>
							<solution/>
						</fillInBlanks>
					</selfCheck>
        </paragraph>
        
        
      </act>
    </learningObject>
      
    <learningObject title="Compréhension de codes Java">
    <!-- ============================================================ -->
      <act>
        
        <selfCheck title="Activité &quot;remplir les blancs&quot;" shuffle="yes">
          <fillInBlanks>
            <question>  
              <paragraph cssClass="java">
<![CDATA[public class Outils {

	public static int abs(int nombre) { 

		int absolu = nombre;

		if (nombre < 0) {		
			absolu = -nombre;
		} 
		
		return absolu;
		
	}
	
	public static void main (String[] args) {  
	
		int valAbsolue;  
		
		...  
		System.out.println (valAbsolue);  
		
	}

}]]>				</paragraph>
              <paragraph>
                Ajoutez l'instruction qui assigne à <formatted style="italic">valAbsolue</formatted> 
                le résultat de l'appel à la méthode <formatted style="italic">abs</formatted> avec comme paramètre la valeur 
                <formatted style="italic">-4</formatted>?
              </paragraph>
            </question>
            <gapText> 
              <gap answers="">valAbsolue</gap> 
              <gap answers="">=</gap> 
              <gap answers="abs(-4), abs (-4), abs ( -4 ), abs( -4)">abs(-4)</gap> ;
            </gapText>
            
            <solution/>
            
          </fillInBlanks>
          
        </selfCheck>
    <paragraph cssClass="pagebreak"/>        
      
        <paragraph title="Soit le code suivant :  ">
        <paragraph cssClass="java">
<![CDATA[public class Operation {

	public static void entete() {
		System.out.println("Operations");
	}
  
	public static double demanderEntier() {  
	
		Scanner clavier = new Scanner(System.in);
		int nb;
		
		System.out.print("Entrez un nombre entier: ");
		nb = clavier.nextInt();
		
		return nb;  
	}  
	
	public static int max2 ( int nb1, int nb2 ) { 
	 
		int max;
		
		if (nb1 > nb2) {
			max = nb1;
		} else {
			max = nb2;
		}
		
		return max;  
	}   
	 
}]]>				</paragraph>
</paragraph>
      
        <selfCheck title="Appels de méthodes de classe dans la même classe" shuffle="yes">
          <multipleChoice>
            <question>
              Parmi les appels de méthodes suivants dans la méthode main <formatted style="bold">de la même classe</formatted>,  lesquels sont corrects?  
            </question>
            <answer feedback="" correct="no"><formatted style="java">entete("Operations");</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">entete(10);</formatted></answer>
            <answer feedback="" correct="yes"><formatted style="java">entete();</formatted></answer>
            <answer feedback="" correct="no">
              <formatted style="java">String chaine = entete(); System.out.println(chaine);</formatted>
            </answer>
            <answer feedback="" correct="yes"><formatted style="java">double nombre = demanderEntier();</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">double nombre = demanderEntier(5);</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">int max2 = max2(3.2,2.3);</formatted></answer>
            <answer feedback="" correct="yes"><formatted style="java">int max2 = max2(3,2);</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">int max2 = max2(3,2,5);</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">int max2 = max2(3.5);</formatted></answer>
          </multipleChoice>
        </selfCheck>
        
        <selfCheck title="Appels de méthodes de classe dans une autre classe" shuffle="yes">
          <multipleChoice>
            <question>
              Parmi les appels de méthodes suivants dans la méthode main <formatted style="bold">d'une autre classe</formatted>, 
              lesquels sont corrects (en supposant qu'aucune classe n'ait été importée)?  
            </question>
            <answer feedback="" correct="no"><formatted style="java">entete("Operations");</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">Operation.entete("Operations");</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">entete();</formatted></answer>
            <answer feedback="" correct="yes"><formatted style="java">Operation.entete();</formatted></answer>
            <answer feedback="" correct="yes"><formatted style="java">double nombre = Operation.demanderEntier();</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">double nombre = demanderEntier();</formatted></answer>
            <answer feedback="" correct="yes"><formatted style="java">int max2 = Operation.max2(1,2);</formatted></answer>
            <answer feedback="" correct="no"><formatted style="java">int max2 = max2(1,2);</formatted></answer>
          </multipleChoice>
          
        </selfCheck>
        
      </act>
    </learningObject>
    
    <learningObject title="À vous de jouer...">
    <!-- ============================================================ -->
      <act>
        <paragraph>
          Voici quelques conseils pour vous guider dans la résolution de tels problèmes :
          <list listStyle="unordered">
            <item>il convient d’abord de bien comprendre le problème posé ; assurez-vous qu’il est parfaitement spécifié ;</item>
            <item>résolvez le problème via quelques exemples précis ;</item>
            <item>mettez en évidence les variables <formatted style="bold">« données »</formatted>, les variables <formatted style="bold">« résultats »</formatted> et les variables de travail ;</item>
            <item>n’hésitez pas à faire une ébauche de résolution en français avant d’élaborer l’algorithme définitif pseudo-codé ;</item>
            <item>déclarez ensuite les variables (et leur type) qui interviennent dans chaque algorithme ; les noms des variables risquant de ne pas être suffisamment explicites.</item>
            <item>Écrivez la partie algorithmique <formatted style="bold">AVANT</formatted> de vous lancer dans la programmation en Java.</item>
          </list>
        </paragraph>
        
        <paragraph>
        Écrivez les algorithmes et codez les programmes Java correspondant qui 
          <list listStyle="ordered">
            <item>échange le contenu de deux variables entières passées en paramètres.
            </item>
            <item>retourne le maximum de 4 nombres donnés en paramètre en utilisant 
              les algorithmes <formatted style="code">max2</formatted> et/ou <formatted style="code">max3</formatted> déjà développés dans ce chapitre.</item>
            <item>valide une date donnée par trois entiers : l’année, le mois et le jour.</item>
          </list>
        </paragraph>
        
        <paragraph title="sinus">
          Dans un triangle rectangle,
          <list listStyle="ordered">
            <item>le carré de l’hypoténuse (h) est calculé par la somme des carrés des 2 autres côtés.</item>
            <item>le sinus Â est donné par le côté opposé (o) divisé par l’hypoténuse (h).</item>
          </list>
          <paragraph>
            <multimedia src="../image/sin.png" type="png"/>
		      </paragraph>
          Écrivez un algorithme qui reçoit les valeurs (dans l’ordre) du côté opposé (o) et
          adjacent (a) d'un triangle rectangle et qui retourne le sinus de l'angle Â de ce triangle rectangle.
        </paragraph>
      </act>
    </learningObject>
  </unit>
</lesson>
