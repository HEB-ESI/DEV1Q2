<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../_templates/java/latex.xsl"?>
<lesson xmlns="http://www.elml.ch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.elml.ch ../../../_config/validate.xsd" 
	label="TDAlt" title="TD Alternatives">
	
	<entry>
		<paragraph>
			Ce TD a pour but d'aborder les structures alternatives qui permettent de conditionner
      des parties d’algorithmes, de code. Elles ne seront exécutées que si une condition est satisfaite.
		</paragraph>
	</entry>
	
	<!-- =========================================================== -->
	<unit label="SiAlorsSinon" title="si – alors – sinon">
	<!-- =========================================================== -->

    <entry>Cette structure permet d’exécuter une partie de code 
    ou une autre en fonction de la valeur de vérité d’une condition.</entry>
    
		<learningObject title="si-alors-fin si">
		<!-- ================================================ -->
		<clarify>
		  <paragraph>En pseudo-code :</paragraph>
      <paragraph cssClass="code">
si condition alors
      // instructions à réaliser si la condition est VRAIE
fin si
      </paragraph>
      <paragraph>
        La <formatted style="bold">condition</formatted> est une expression délivrant un résultat 
        <formatted style="bold">booléen</formatted> (vrai ou faux) ; elle associe
        des variables, constantes, expressions arithmétiques, au moyen des opérateurs logiques ou de
        comparaison. En particulier, cette condition peut être réduite à une seule variable booléenne.
      </paragraph>
      <paragraph>
        Dans cette structure, lorsque la <formatted style="bold">condition est vraie</formatted>, il y a exécution 
        de la séquence d’instructions contenue entre les mots <formatted style="bold">alors</formatted> 
        et <formatted style="bold">fin si</formatted> ; ensuite, l’algorithme continue de façon
        séquentielle.
      </paragraph>
      <paragraph>
        Lorsque la <formatted style="bold">condition est fausse</formatted>, 
        les instructions se trouvant entre <formatted style="bold">alors</formatted> 
        et <formatted style="bold">fin si</formatted> sont tout simplement <formatted style="bold">ignorées</formatted>.
      </paragraph>
    </clarify>
    
    <look>
      <paragraph cssClass="code">
algorithme Test (nombre1 : entier)
    si (nombre1 <![CDATA[<]]> 0) alors
      afficher nombre1, " est négatif"
    fin si
fin algorithme
    </paragraph>
    </look>
    
    <clarify>
		  <paragraph>En Java :</paragraph>
      <paragraph cssClass="java">
if (condition) { 
      // instructions si la condition est VRAIE
}
      </paragraph>
      <paragraph>
        La <formatted style="bold">condition</formatted> est une expression délivrant un résultat 
        <formatted style="bold">booléen</formatted> (true ou false).
      </paragraph>
      <paragraph>
        Dans cette structure, lorsque la <formatted style="bold">condition est vraie</formatted>, il y a exécution 
        de la séquence d’instructions contenue entre les mots <formatted style="bold">{</formatted> 
        et <formatted style="bold">}</formatted> ; ensuite, le code continue de façon séquentielle.
      </paragraph>
      <paragraph>
        Lorsque la <formatted style="bold">condition est fausse</formatted>, 
        les instructions se trouvant entre <formatted style="bold">{</formatted> 
        et <formatted style="bold">}</formatted> sont tout simplement <formatted style="bold">ignorées</formatted>.
      </paragraph>
    </clarify>
    <look>
      <paragraph cssClass="java">
public static void negatif (int nombre1) {
    if (nombre1 <![CDATA[<]]> 0) {
        System.out.println (nombre1 + " est negatif");
    }
}
    </paragraph>
    </look>
		</learningObject>


		<learningObject title="si-alors-sinon-fin si">
		<!-- ================================================ -->
		<clarify>
		  <paragraph>En pseudo-code :</paragraph>
      <paragraph cssClass="code">
si condition alors
      // instructions à réaliser si la condition est VRAIE
sinon
      // instructions à réaliser si la condition est FAUSSE
fin si
      </paragraph>
      <paragraph>
        Dans cette structure, une et une seule des deux séquences est exécutée.
      </paragraph>
    </clarify>
    
    <look>
      <paragraph cssClass="code">
// Lit un nombre et affiche si ce nombre est positif (zéro inclus) ou strictement négatif
algorithme signeNombre (nb : entier)
    si nb <![CDATA[<]]> 0 alors
      afficher "le nombre", nb, " est négatif"
    sinon
      afficher "le nombre", nb, " est positif ou nul"
    fin si
fin algorithme
    </paragraph>
    </look>
    
    <clarify>
		  <paragraph>En Java :</paragraph>
      <paragraph cssClass="java">
if (condition) { 
      // instructions si la condition est VRAIE
} else { 
      // instructions si la condition est FAUSSE
} 
      </paragraph>
    </clarify>
    <look>
      <paragraph cssClass="java">
import java. util .Scanner;
public class Test {
    public static void main(String[] args){
      Scanner clavier = new Scanner(System.in);
      int nombre1;
      nombre1 = clavier. nextInt ();
      signe(nombre1);
    }
    public static void signe(int nombre1) {
      System.out. println (nombre1 + " est un nombre ");
      if (nombre1 <![CDATA[<]]> 0) {
        System.out. println (" negatif ");
      } else {
        System.out. println (" positif ");
      }
    }
}
    </paragraph>
    </look>
		</learningObject>

	</unit>
		
  
	<!-- =========================================================== -->
	<unit label="SelonQue" title="selon que">
	<!-- =========================================================== -->

    <entry>Avec ces structures, plusieurs branches d’exécution sont disponibles. L’ordinateur choisit la
    branche à exécuter en fonction de la valeur d’une variable (ou parfois d’une expression) ou
    de la condition qui est vraie.</entry>
    
		<learningObject title="selon que">
		<!-- =================================================== -->
		<clarify>
		  <paragraph>En pseudo-code :</paragraph>
      <paragraph cssClass="code">
selon que variable vaut
    liste_1 de valeurs séparées par des virgules :
      // instructions lorsque la valeur de la variable est dans liste_1
    liste_2 de valeurs séparées par des virgules :
      // instructions lorsque la valeur de la variable est dans liste_2
    ...
    liste_n de valeurs séparées par des virgules :
      // instructions lorsque la valeur de la variable est dans liste_n
    autres :
      // instructions lorsque la valeur de la variable
      // ne se trouve dans aucune des listes précédentes
fin selon que
      </paragraph>
      <paragraph>Notez que le cas <formatted style="code">autres</formatted> est facultatif.</paragraph>
      <paragraph>
        Dans ce type de structure, comme pour la structure <formatted style="code">si-alors-sinon</formatted>, une seule des séquences
        d’instructions sera exécutée. On veillera à ne pas faire apparaitre une même valeur dans
        plusieurs listes. Cette structure est une simplification d’écriture de plusieurs alternatives
        imbriquées.
      </paragraph>
      <paragraph>
        Elle est équivalente à : 
      </paragraph>
      <paragraph cssClass="code">
si variable = une des valeurs de la liste_1 alors
    // instructions lorsque la valeur est dans liste_1
sinon
    si variable = une des valeurs de la liste_2 alors
      // instructions lorsque la valeur est dans liste_2
    sinon
      ...
      si variable = une des valeurs de la liste_n alors
        // instructions lorsque la valeur est dans liste_n
      sinon
        // instructions lorsque la valeur de la variable
        // ne se trouve dans aucune des listes précédentes
      fin si
    fin si
fin si
      </paragraph>
    </clarify>
    
    <look>
      <paragraph>
        Écrivons un algorithme qui lit un jour de la semaine sous forme d’un nombre entier (1 pour
        lundi, . . ., 7 pour dimanche) et qui affiche en clair ce jour de la semaine.
      </paragraph>
      <paragraph cssClass="code">
// Lit un nombre entre 1 et 7 et affiche en clair le jour de la semaine correspondant.
algorithme jourSemaine (jour : entier)
    selon que jour vaut
      1 : afficher "lundi"
      2 : afficher "mardi"
      3 : afficher "mercredi"
      4 : afficher "jeudi"
      5 : afficher "vendredi"
      6 : afficher "samedi"
      7 : afficher "dimanche"
    fin selon que
fin algorithme
    </paragraph>
    </look>
    
    <clarify>
    <paragraph>En Java :</paragraph>
      <paragraph cssClass="code">
switch (variable){
    case val1 :
      // instructions lorsque la valeur de la variable est val1
      break;
    case val2 :
    case val3 :
    case val4 :
      // instructions lorsque la valeur de la variable est val2 ou val3 ou val4
      break;
    ...
    case valN  :
      // instructions lorsque la valeur de la variable est valN
      break;
    default :
      // instructions lorsque la valeur de la variable
      // ne se trouve dans aucune des listes précédentes
}
      </paragraph>
      <paragraph>Notez que le cas <formatted style="code">default</formatted> est facultatif.</paragraph>
      <paragraph>
        Notez le <formatted style="code">break</formatted> à la fin de chaque (groupe de)<formatted style="code"> case</formatted>.
      </paragraph>
      <paragraph>
        La variable peut être de type <formatted style="code">byte</formatted>, <formatted style="code">short</formatted>, 
        <formatted style="code">char</formatted>, <formatted style="code">int</formatted>, <formatted style="code">String</formatted> et 
        les types énumérés que nous verrons plus tard.
      </paragraph>
      <paragraph>
        Elle est équivalente à : 
      </paragraph>
      <paragraph cssClass="java">
if (variable == val1){
      // instructions lorsque la valeur de la variable est val1
} else if (variable ==  val2 || variable ==  val3 || variable == val4){
      // instructions lorsque la valeur de la variable est val2 ou val3 ou val4
} else if (variable == valN){
      // instructions lorsque la valeur de la variable est valN
} else {
      // instructions lorsque la valeur de la variable
      // ne se trouve dans aucune des listes precedentes
}      </paragraph>
    </clarify>
    
    <look>
      <paragraph>Par exemple : </paragraph>
      <paragraph cssClass="java">
import java.util.Scanner;
public class Test{
  public static void main(String[] args){
      Scanner clavier = new Scanner(System.in);
      String produit = clavier.next();
      System.out.println(prix(produit));
  }
  
  public static double prix(String produit){
      switch(produit) {
        case "Coca" :
        case "Sprite" :
        case "Fanta" :
        prixDistributeur = 0.8;
        break;
      case "IceTea" :
        prixDistributeur = 1.2;
        break;
      default :
        prixDistributeur = 0;
        break;
      }
      return prixDistributeur;
    }
}
      </paragraph>
    </look>
		</learningObject>


		<!--learningObject title="selon que (version avec conditions)">
		< ================================================ >
		<clarify>
		  <paragraph>En pseudo-code :</paragraph>
      <paragraph cssClass="code">
selon que
    condition_1 :
      // instructions lorsque la condition_1 est vraie
    condition_2 :
      // instructions lorsque la condition_2 est vraie
    ...
    condition_n :
      // instructions lorsque la condition_n est vraie
    autres :
      // instructions à exécuter quand aucune
      // des conditions précédentes n’est vérifiée
fin selon que
      </paragraph>
      <paragraph>
        Comme précédemment, une et une seule des séquences d’instructions est exécutée. On
        veillera à ce que les conditions ne se « recouvrent » pas, c’est-à-dire que deux d’entre elles
        ne soient jamais vraies simultanément. 
      </paragraph>
      <paragraph>C’est équivalent à : </paragraph>
      <paragraph cssClass="code">
si condition_1 alors
    // instructions lorsque la condition_1 est vraie
sinon
    si condition_2 alors
      // instructions lorsque la condition_2 est vraie
    sinon
      ...
      si condition_n alors
        // instructions lorsque la condition_n est vraie
      sinon
        // instructions à exécuter quand aucune
        // des conditions précédentes n’est vérifiée
      fin si
    fin si
fin si
      </paragraph>
    </clarify>
    
    <look>
      <paragraph>Par exemple : </paragraph>
      <paragraph cssClass="code">
// Lit un nombre et affiche si ce nombre est strictement positif , strictement négatif ou nul.
algorithme signeNombre()
    nb : entier
    demander nb
    selon que 
      nb <![CDATA[<]]> 0 :
        afficher "le nombre", nb, " est négatif"
      nb <![CDATA[>]]> 0 :
        afficher "le nombre", nb, " est positif"
      autres : 
        afficher "le nombre", nb, " est nul"
    fin selon que
fin algorithme
    </paragraph>
    </look>
    
    <clarify>
		  <paragraph>En Java :</paragraph>
		  <paragraph>Il n'existe pas de <formatted style="code">switch</formatted> avec condition, 
		  il faut l'écrire comme une succession de <formatted style="code">if</formatted>.</paragraph>
      <paragraph cssClass="java">
if (condition_1){
      // instructions lorsque la condition_1 est vraie
} else if (condition_2){
      // instructions lorsque la condition_2 est vraie
} ... 
} else if (condition_n){
      // instructions lorsque la condition_n est vraie
} else {
      // instructions a executer quand aucune
      // des conditions precedentes n est verifiee
}
      </paragraph>
    </clarify>
    <look>
      <paragraph>Par exemple : </paragraph>
      <paragraph cssClass="java">
import java. util .Scanner;
public class Test {
    public static void main(String [] args) {
      Scanner clavier = new Scanner(System.in);
      int nb = clavier.nextInt();
      if (nb>0) {
        System.out. println (" positif ");
      } else if (nb==0) {
        System.out. println ("nul");
      } else {
        System.out. println (" negatif ");
      }
    }
}
    </paragraph>
    </look>
		</learningObject-->

	</unit>
	
	
	<!-- =================================================================== -->
	<unit label="Exercices" title="Exercices">
	<!-- =================================================================== -->
		
		<entry>
			<paragraph>
				Maintenant, mettons tout ça en pratique.
      </paragraph>
    </entry>
    
    <learningObject title="Compréhension d’algorithme">
    <!-- ============================================================ -->
      <act>
        <paragraph>
          Pour ces exercices, nous vous demandons de comprendre des algorithmes donnés. 
          <selfCheck title="Compréhension" shuffle="no">
						<fillInBlanks>
							<question>
							  Que vont-ils retourner/afficher ?
              </question>
							<gapText> 
								<list listStyle="unordered">
									<item>
										<paragraph cssClass="code">
algorithme exerciceA (a, b : entiers) → entier
  si a > b alors
    a ← a+2*b
  fin si
  retourner a
fin algorithme
				</paragraph>
				            <paragraph>Si les nombres reçus sont respectivement 2 et 3 ? </paragraph>
				            <gap answers="2">2</gap> 
									<paragraph>Si les nombres reçus sont respectivement 4 et 1 ? </paragraph>
									  <gap answers="6">6</gap> 
                  </item>
									<item>
										<paragraph cssClass="code">
algorithme exerciceB()
    a, b, c : entiers
    demander b, a
    si a > b alors
      c ← a DIV b
    sinon
      c ← b MOD a
    fin si
    afficher c
fin algorithme
				</paragraph>
				            <paragraph>Si les nombres lus sont respectivement 2 et 3 ? </paragraph>
				            <gap answers="1">1</gap> 
									<paragraph>Si les nombres lus sont respectivement 4 et 1 ? </paragraph>
									  <gap answers="0">0</gap> 
                  </item>
									<item>
										<paragraph cssClass="code">
algorithme exerciceC ()
    x1, x2 : entiers
    ok : booléen
    demander x1, x2
    ok ← x1 > x2
    si ok alors
      ok ← ok ET x1 = 4
    sinon
      ok ← ok OU x2 = 3
    fin si
    si ok alors
      x1 ← x1 * 1000
    fin si
    afficher x1 + x2
fin algorithme
				</paragraph>
				            <paragraph>Si les nombres lus sont respectivement 2 et 3 ? </paragraph>
				            <gap answers="2003">2003</gap> 
									<paragraph>Si les nombres lus sont respectivement 4 et 1 ? </paragraph>
									  <gap answers="4001">4001</gap> 
                  </item>
								</list>
							</gapText>
							<solution/>
						</fillInBlanks>
					</selfCheck>
        </paragraph>
      </act>
    </learningObject>
      
    <learningObject title="Compréhension de codes Java">
    <!-- ============================================================ -->
      <act>
        <paragraph>
          Pour ces exercices, nous vous demandons de comprendre des codes Java donnés. 
          <selfCheck title="Compréhension" shuffle="no">
						<fillInBlanks>
							<question>
							  Que vont-ils afficher si à chaque fois les deux nombres lus au départ sont successivement 2, 3 et 4 ?
							</question>
							<gapText> 
								<list listStyle="unordered">
									<item>
										<paragraph cssClass="java">
import java.util.Scanner;
public class Exercice1 {
    public static void main(String [] args) {
        Scanner clavier = new Scanner(System.in);
        int nb1 = clavier.nextInt();
        int nb2 = clavier.nextInt();
        int nb3 = clavier.nextInt();
        System.out.println(max(nb1, nb2));
    }
    public static int max(int nb1, int nb2) {
        int max;
        if (nb1 <![CDATA[<]]> nb2){
          max= nb1;
        } else {
          max = nb2;
        } 
        return max;
    }
}
        </paragraph>
				            <gap answers="2">2</gap> 
									</item>  
									<item>
										<paragraph cssClass="java">
import java.util.Scanner;
public class Exercice2 {
    public static void main(String [] args) {
        Scanner clavier = new Scanner(System.in);
        int nb1 = clavier.nextInt();
        int nb2 = clavier.nextInt();
        int nb3 = clavier.nextInt();
        System.out.println(max(nb1, nb2, nb3));
    }
    public static int max(int nb1, int nb2, int nb3) {
        int max;
        if (nb1 <![CDATA[>]]> nb2 <![CDATA[&&]]> nb1 <![CDATA[>]]> nb3){
          max = nb1;
        } else {
            if (nb2 <![CDATA[>]]> nb3){
              max = nb2;
            } else {
              max = nb3;
            }
        } 
        return max;
    }
}
        </paragraph>
				            <gap answers="4">4</gap> 
									</item>  
									<item>
										<paragraph cssClass="java">
import java.util.Scanner;
public class Exercice3 {
    public static void main(String [] args) {
        Scanner clavier = new Scanner(System.in);
        int nb1 = clavier.nextInt();
        int nb2 = clavier.nextInt();
        int nb3 = clavier.nextInt();
        System.out.println(trio(nb1));
    }
    public static void trio(int nb1) {
        switch (nb1){
          case 1 : System.out.print("premier"); break;
          case 2 : System.out.print("deuxieme"); break;
          case 3 : System.out.print("troisieme"); break;
          default : System.out.print("pas dans le trio");
        } 
    }
}
        </paragraph>
				            <gap answers="deuxième">deuxième</gap> 
									</item>  
									<item>
										<paragraph cssClass="java">
import java.util.Scanner;
public class Exercice3 {
    public static void main(String [] args) {
        Scanner clavier = new Scanner(System.in);
        int nb1 = clavier.nextInt();
        int nb2 = clavier.nextInt();
        int nb3 = clavier.nextInt();
        System.out.println(trio(nb1));
    }
    public static void trio(int nb1) {
        switch (nb1){
          case 1 : System.out.print("premier");
          case 2 : System.out.print("deuxieme");
          case 3 : System.out.print("troisieme");
          default : System.out.print("pas dans le trio");
        } 
    }
}
        </paragraph>
				            <gap answers="premierdeuxiemetroisiemepas dans le trio">premierdeuxiemetroisiemepas dans le trio</gap> 
									</item>  
								</list>
							</gapText>
							<solution/>
						</fillInBlanks>
					</selfCheck>
        </paragraph>
      </act>
    </learningObject>
    
    <learningObject title="À vous de jouer...">
    <!-- ============================================================ -->
      <act>
        <paragraph>
          Voici quelques conseils pour vous guider dans la résolution de tels problèmes :
          <list listStyle="unordered">
            <item>il convient d’abord de bien comprendre le problème posé ; assurez-vous qu’il est parfaitement spécifié ;</item>
            <item>résolvez le problème via quelques exemples précis ;</item>
            <item>mettez en évidence les variables <formatted style="bold">« données »</formatted>, les variables <formatted style="bold">« résultats »</formatted> et les variables de travail ;</item>
            <item>n’hésitez pas à faire une ébauche de résolution en français avant d’élaborer l’algorithme définitif pseudo-codé ;</item>
            <item>déclarez ensuite les variables (et leur type) qui interviennent dans l’algorithme ; les noms des variables risquant de ne pas être suffisamment explicites.</item>
            <item>Écrivez la partie algorithmique <formatted style="bold">AVANT</formatted> de vous lancer dans la programmation en Java.</item>
          </list>
        </paragraph>
        
        <paragraph>
        Écrivez les algorithmes et codez les programmes Java correspondant qui 
          <list listStyle="ordered">
            <item>étant donné deux nombres quelconques, recherche et affiche le plus
              grand des deux. Attention ! On ne veut pas savoir si c’est le premier ou le deuxième qui est
              le plus grand mais bien quelle est cette plus grande valeur. Le problème est donc bien défini
              même si les deux nombres sont identiques.
            </item>
            <item>étant donné trois nombres quelconques, recherche et retourne le plus grand des trois.</item>
            <item>retourne un message indiquant si un entier est strictement négatif, nul ou strictement positif.</item>
            <item>étant donné trois nombres, recherche et retourne si le premier des 
            trois appartient à l’intervalle donné par le plus petit et le plus grand des deux autres (bornes exclues). 
            Qu’est-ce qui change si on inclut les bornes ?</item>
            <item>étant donné une équation du deuxième degré, déterminée par le coefficient de x² , le coefficient de x et le terme indépendant, 
            recherche et affiche la (ou les) racine(s) de l’équation (ou un message adéquat s’il n’existe pas de racine réelle).</item>
            <item>à partir d’un moment exprimé par 2 entiers, heure et minute, affiche le moment qu’il sera une minute plus tard.</item>
            <item>vérifie si une année est bissextile. Pour rappel, les années bissextiles sont les années multiples de 4.
              Font exception, les multiples de 100 (sauf les multiples de 400 qui sont bien bissextiles). Ainsi 2012 et 2400 sont bissextile mais pas 2010 ni 2100.</item>
          </list>
        </paragraph>
        
        <paragraph title="Stationnement alternatif">
          Dans une rue où se pratique le stationnement alternatif, du 1 au 15 du mois, on se gare du côté des maisons ayant un numéro impair, 
          et le reste du mois, on se gare de l’autre côté.
          Écrivez un algorithme et le code java correspondant qui, sur base de la date du jour et du numéro de maison devant laquelle
          vous vous êtes arrêté, retourne si vous êtes bien stationné ou non.
        </paragraph>
        
        <paragraph title="La fièvre monte">
          Chez l'humain la température corporelle normale moyenne est de 37 °C (entre 36,5 °C et 37,5 °C selon les individus). 
          La fièvre est définie par une température rectale au repos supérieure ou égale à 38,0 °C. 
          Une fièvre au-delà de 40 °C  est considérée comme un risque de santé majeur et immédiat. 
          Lorsque la fièvre est modérée (de 37,7 °C à 37,9 °C), on parle de fébricule.<newLine/>
          [Wikipedia]
        </paragraph>
        <paragraph>
          Écrivez un algorithme <formatted style="code">fièvre</formatted> qui reçoit une température et qui affiche si le patient a de la
          température (supérieure ou égale à 38,0°C) ET si cette cette fièvre est modérée (entre 38,0°C 
          et 40,0°C) ou à risque (strictement supérieur à 40,0°C). 
          Rien ne doit être affiché si le patient n'a pas de fièvre.
        </paragraph>
        <paragraph>Écrivez le code java correspondant.</paragraph>
        
        <paragraph title="Taxes communales">
          Dans ma commune, les taxes communales des enlèvements des immondices s’élèvent à
          <list listStyle="unordered">
            <item>80€ pour une personne isolée ;</item>
            <item>135€ pour une famille de 2 ou 3 personnes ;</item>
            <item>175€ pour une famille de 4 personnes ou plus.</item>
          </list>
          Écrivez un algorithme qui reçoit le nombre de personnes composant la famille et qui retourne le prix de la taxe à payer.
        </paragraph>
        <paragraph>Écrivez le code java correspondant.</paragraph>
        
        <paragraph title="Au cinéma">
          À Bruxelles, lors de chaque projection cinématographique, une taxe de 0,5€ est
          prélevée sur le prix du billet de chaque spectateur.
          <list listStyle="unordered">
            <item>Écrivez un algorithme qui reçoit le nombre de spectateurs et qui retourne le prix de la taxe à payer.</item>
            <item>Écrivez le code java correspondant.</item>
            <item>
              Si le film projeté est un documentaire, aucune taxe n’est prélevée. 
              Écrivez un algorithme qui reçoit le nombre de spectateurs et un booléen (à vrai
              si le film est un documentaire et faux sinon) et qui retourne le prix de la taxe
              à payer.
            </item>
            <item>Écrivez le code java correspondant.</item>
          </list>
        </paragraph>
      </act>
    </learningObject>
  </unit>
</lesson>
