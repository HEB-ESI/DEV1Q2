<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../_templates/java/latex.xsl"?>
<lesson xmlns="http://www.elml.ch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.elml.ch ../../../_config/validate.xsd" 
	label="InitTableau" title="TD Tableaux">
	
	<entry>
		<paragraph>
			Ces exercices ont pour but de vérifier que vous avez fixé les tableaux, une structure qui peut contenir plusieurs exemplaires de données similaires.
		</paragraph>
	</entry>
	
	<!-- =========================================================== -->
	<unit label="Tableaux" title="Les tableaux">
	<!-- =========================================================== -->
  
  
    
		<!-- ================================================ -->
		<learningObject title="UtilTabInt">
		<!-- ================================================ -->
			
			<clarify>
				<paragraph>
					On vous demande d'écrire une classe
					<formatted style="code">UtilTabInt</formatted>
					qui contiendra des méthodes de classe utiles 
					pour la manipulation de tableaux d'entiers.
				</paragraph>
				<paragraph>
          <list listStyle="unordered">
            <item>Il convient d’abord de bien comprendre le problème posé ; assurez-vous qu’il est parfaitement spécifié ;</item>
            <item>déclarez ensuite les variables (et leur type) qui interviennent dans l’algorithme ; les noms des variables risquant de ne pas être suffisamment explicites ;</item>
            <item><formatted style="bold">mettez en évidence les variables « données », les variables « résultats » et les variables de travail ;</formatted></item>
            <item>n’hésitez pas à faire une ébauche de résolution en français avant d’élaborer l’algorithme définitif pseudo-codé.</item>
            <item><formatted style="bold">Écrivez la partie algorithmique AVANT de vous lancer dans la programmation en Java.</formatted></item>
            <item>Demandez-vous si vous avez besoin de parcourir tout le tableau ou de sortir prématurément (si on a trouvé ce qu'on cherche par exemple).</item>
            <item><formatted style="bold">Écrivez le plan de tests en écrivant l'algorithme. Codez les tests après avoir écrit le code Java.</formatted></item>
          </list>
        </paragraph>
				<paragraph>
					<formatted style="bold">Attention !</formatted>
					<formatted style="bold">Codez</formatted>, <formatted style="bold">commentez</formatted> 
					et <formatted style="bold">testez</formatted> en profondeur
					(pensez aux cas particuliers)
					chaque méthode avant de passer à la suivante.
				</paragraph>
			</clarify>

			<act>
				<paragraph title="initialiser" icon="act"/>  
				<list listStyle="ordered">
				<item> 
					Écrivez, dans la classe 
					<formatted style="java">UtilTabInt</formatted>, 
					une méthode de classe 
					<formatted style="java">initialiser</formatted>    
					qui reçoit en paramètre un tableau d'entiers. 
					Cette méthode initialisera toutes les valeurs 
					du tableau à la valeur de l'indice dans le tableau.
					Faites bien attention
					aux cas particuliers que vous pouvez rencontrer. 
					Que se passe-t-il si le tableau est null ? 
					Et si il est vide ?
				</item> 
				<item> 
					Dans la méthode principale de la classe 
					<formatted style="code">Test</formatted>, 
					créez un tableau d'entiers de taille 10
					et appelez la méthode 
					<formatted style="code">initialiser</formatted> 
					ci-dessus pour initialiser votre tableau.
					Testez également les cas particuliers.
				</item> 
				<item> 
					Écrivez déjà la 
					<formatted style="bold">javadoc</formatted> 
					pour la méthode 
					<formatted style="code">initialiser</formatted>.
					N'oubliez pas de la générer dans un répertoire 
					nommé <formatted style="code">javadoc</formatted> 
					et de vérifier le résultat obtenu.
				</item> 
				</list>
				
				<paragraph title="afficher" icon="act"/>  
				<list listStyle="ordered">
				<item>
					Écrivez, dans la classe <formatted style="java">UtilTabInt</formatted>, 
					une méthode de classe <formatted style="java">afficher</formatted> 
					qui reçoit en paramètre un tableau d'entiers et qui affiche tous les éléments du tableau.
				</item> 
				<item> 
					Dans la méthode principale de la classe 
					<formatted style="java">Test</formatted>, 
					appelez la méthode <formatted style="java">afficher</formatted> 
					pour afficher les éléments du tableau que vous avez créé.
				</item> 
				<item> 
					Vous avez encore ajouté une méthode et modifié votre méthode <formatted style="java">main</formatted>. 
					N'oubliez pas de <formatted style="bold">recompiler</formatted> vos classes,
					d'<formatted style="bold">exécuter</formatted> votre programme
					et de compléter la <formatted style="bold">javadoc</formatted>.
					À partir de maintenant, je ne vous le rappellerai plus !
					</item> 
				</list>
				
				<paragraph title="sommer" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">sommer</formatted> 
					qui reçoit un tableau d'entiers
					et retourne la somme de ses élements.
				</paragraph>    
				
				<paragraph title="maximum" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">maximum</formatted> 
					qui reçoit un tableau d'entiers
					et retourne la valeur maximale rencontrée.
				</paragraph>    

				<paragraph title="indiceMax" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">indiceMax</formatted>
					qui reçoit un tableau d'entiers
					et retourne l'indice de la valeur maximale rencontrée.
					Si la valeur maximale est présente plusieurs fois,
					on retourne l'indice le plus petit.
				</paragraph>    

				<paragraph title="créer" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">créer</formatted> 
					qui reçoit en paramètre un entier représentant 
					la taille du tableau 
					et qui retourne le tableau d'entiers 
					créé de la taille donnée 
					et dont les éléments sont initialisés à 0.
					Aide : Pensez aux valeurs initiales
					des éléments d'un tableau.
				</paragraph>    

				<paragraph title="estTrié" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">estTrié</formatted>
					qui indique si le tableau reçu
					en paramètre est trié ou pas.
				</paragraph>    

				<paragraph title="créer" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">créer</formatted> 
					qui reçoit en paramètre deux entiers
					<list style="unordered">
						<item>un entier représentant la taille du tableau</item>
						<item>et un entier représentant la valeur initiale des éléments du tableau</item>
					</list>
					et qui retourne le tableau d'entiers
					<list style="unordered">
						<item>créé de la taille donnée</item>
						<item>et dont les éléments sont initialisés à la valeur du deuxième paramètre reçu.</item>
					</list>
				</paragraph>    

				<paragraph title="inverser" icon="act"/>  
				<paragraph>
					Écrivez une méthode 
					<formatted style="java">inverser</formatted> 
					qui inverse les éléments du tableau reçu en paramètre.
					Le premier élément est échangé avec le dernier 
					et ainsi de suite.
				</paragraph>    

				<paragraph title="positionsMin" icon="act"/>  
				<paragraph>
					Écrivez une méthode
					<formatted style="java">positionsMin</formatted>
					qui 
					<formatted style="bold">retourne</formatted>
					un tableau donnant les positions
					de toutes les valeurs minimales
					du tableau reçu en paramètre.
				</paragraph>    
        <paragraph>Pour plus d'exercices, 
          <link uri="../../../TDTableau/fr/html/Exercices_learningObject2.html">révisez ici</link>
        </paragraph>
		  </act>
      
		</learningObject>
  </unit>
</lesson>
