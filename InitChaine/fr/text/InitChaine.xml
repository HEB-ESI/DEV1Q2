<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../_templates/java/latex.xsl"?>
<lesson xmlns="http://www.elml.ch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.elml.ch ../../../_config/validate.xsd" 
	label="InitChaine" title="TD Chaines">
	
	<entry>
		<paragraph>
			Ces exercices ont pour but de vérifier que vous avez fixé les chaines.
		</paragraph>
		<paragraph>
      N'oubliez pas nos quelques conseils pour vous guider dans la résolution de tels problèmes :
      <list listStyle="unordered">
        <item>il convient d’abord de bien comprendre le problème posé ; assurez-vous qu’il est parfaitement spécifié ;</item>
        <item>résolvez le problème via quelques exemples précis ;</item>
        <item>mettez en évidence les variables <formatted style="bold">« données »</formatted>, les variables <formatted style="bold">« résultats »</formatted> et les variables de travail ;</item>
        <item>n’hésitez pas à faire une ébauche de résolution en français avant d’élaborer l’algorithme définitif pseudo-codé ;</item>
        <item>déclarez ensuite les variables (et leur type) qui interviennent dans chaque algorithme ; les noms des variables risquant de ne pas être suffisamment explicites.</item>
        <item>Écrivez la partie algorithmique <formatted style="bold">AVANT</formatted> de vous lancer dans la programmation en Java.</item>
        <item>Demandez-vous si vous avez besoin de parcourir tout le tableau ou de sortir prématurément (si on a trouvé ce qu'on cherche par exemple).</item>
        <item>Pour la partie Java, dessinez l'arborescence des fichiers. </item>
        <item><formatted style="bold">Écrivez le plan de tests en écrivant l'algorithme. Codez les tests après avoir écrit le code Java.</formatted></item>
      </list>
    </paragraph>

	
      <act>
      
        <paragraph title="Le chiffre de César">
          Depuis l’antiquité, les hommes politiques, les militaires, les hommes d’affaires cherchent à
          garder secret les messages importants qu’ils doivent envoyer. L’empereur César utilisait une
          technique (on dit un chiffrement) qui porte à présent son nom : remplacer chaque lettre du
          message par la lettre qui se situe k position plus loin dans l’alphabet (cycliquement).
          Exemple : si k vaut 2, alors le texte clair "CESAR" devient "EGUCT" lorsqu’il est chiffré et
          le texte "ZUT" devient "BWV".
          Bien sûr, il faut que l’expéditeur du message et le récepteur se soient mis d’accord sur la
          valeur de k.
          On vous demande d’écrire un algorithme qui reçoit une chaine ne contenant que des lettres
          majuscules ainsi que la valeur de k et qui retourne la version chiffrée du message.
          On vous demande également d’écrire l'algorithme de déchiffrement. Cet algorithme reçoit un message 
          chiffré et la valeur de k qui a été utilisée pour le chiffrer et retourne le message en clair.
          Attention ! Ce second algorithme est très simple.
        </paragraph>
        <paragraph>Écrivez le code java correspondant ainsi que la javadoc et les tests.</paragraph>
        
        <paragraph title="Casser le chiffre de César">
          Ce chiffre est en fait assez facile à casser grâce à l’analyse statistique. En effet, dans un texte
          général, les lettres de l’alphabet ne sont pas présentes avec la même fréquence. Par exemple,
          en français, la lettre ’E’ est la plus présente 1 . Ainsi, si on trouve un message chiffré (et si
          on sait que c’est du français et que c’est chiffré par le chiffre de César) on peut tenter de le
          comprendre via une analyse statistique. On analyse la fréquence de chaque lettre du message
          et la plus fréquente remplace probablement le ’E’. Par exemple, si la lettre la plus fréquente
          est le ’B’, il est probable que le message soit chiffré avec un décalage de 3.
          Écrivez un algorithme qui reçoit une chaine - le message chiffré par le chiffre de César - et
          retourne une valeur probable pour le déplacement utilisé pour le chiffrer.
        </paragraph>
        <paragraph>Écrivez le code java correspondant ainsi que la javadoc et les tests.</paragraph>
        
        <paragraph title="Le caractère le plus présent">
          Écrire un algorithme qui, à partir d’un texte donné sous forme de chaine, retourne le caractère
          qui s’y trouve le plus de fois. N.B. : on peut simplifier le problème ici en supposant que le
          texte ne contient que des caractères minuscules non accentués, ainsi que l’absence d’ex &#230;quo.
          Exemple : pour "roberto roule en moto a oslo", l’algorithme renverra ’o’.
        </paragraph>
        <paragraph>Écrivez le code java correspondant ainsi que la javadoc et les tests.</paragraph>
        
        <paragraph title="Palindrome">
          Soit le tableau phrase : tableau de n caractères (caractère alphabétique, le caractère
          d’espacement ou un caractère de ponctuation). Dans ce tableau, des lettres qui se suivent
          constituent un mot. Ces mots sont séparés les uns des autres par un ou plusieurs caractères
          d’espacement ou de ponctuation. Écrire un algorithme qui reçoit en paramètre ce tableau et
          qui vérifie si la phrase formée par les mots de ce tableau est un palindrome. Le résultat sera
          communiqué par le renvoi d’une valeur booléenne. Pour rappel, une phrase palindrome est
          une phrase qui peut se lire dans les deux sens sans tenir compte des espacements et de la
          ponctuation.
          Exemple du contenu du tableau phrase :
          A L'E T A P E, E P A T E-L A !
        </paragraph>
        <paragraph>Écrivez le code java correspondant ainsi que la javadoc et les tests.</paragraph>
        
        <paragraph>Pour plus d'exercices, 
        <link uri="../../../TDChaine/fr/html/Exercices_learningObject1.html">révisez ici</link></paragraph>
      </act>
      </entry>
</lesson>
